package s6.suiviRegime.daoGenere;
import java.sql.*;
import java.util.*;
import s6.suiviRegime.modele.*;
public class RegimeDao{ 
public  void save(Regime modele) throws Exception{

String query = "INSERT INTO REGIME (IDUTILISATEUR, DEBUT, FIN, POIDSOBJECTIF) VALUES(?, ?, ?, ?)";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 con.setAutoCommit(false);
	 statement.setInt(1, model.getUtilisateur().getId());
	 statement.setDate(2, model.getDebut());
	 statement.setDate(3, model.getFin());
	 statement.setFloat(4, model.getPoidsObjectif());
statement.execute();con.commit();
}
catch(Exception e){
con.rollback();
e.printStackTrace();
throw new Exception(" Regime contenant des erreurs, création échouée.");;
}
}finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
public  void update(Regime model) throws Exception{

String query = "UPDATE REGIME SET IDUTILISATEUR= ?, DEBUT= ?, FIN= ?, POIDSOBJECTIF= ? WHERE IDREGIME = ?";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 con.setAutoCommit(false);
	 statement.setInt(1, model.getUtilisateur().getId());
	 statement.setDate(2, model.getDebut());
	 statement.setDate(3, model.getFin());
	 statement.setFloat(4, model.getPoidsObjectif());
	 statement.setInt(5, model.getId());
statement.execute();con.commit();
}
catch(Exception e){
con.rollback();
e.printStackTrace();
throw e;
}
}finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
public void delete(Regime model) throws Exception{

String query = "DELETE FROM REGIME WHERE IDREGIME = ?";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 con.setAutoCommit(false);
	 statement.setInt(1, model.getId());
statement.execute();con.commit();
}
catch(Exception e){
con.rollback();
e.printStackTrace();
throw e;
}
}finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
public List<Regime> findAll() throws Exception{

String query = "SELECT * FROM REGIME";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 return DBToModel(statement.executeQuery());
}
catch(Exception e){
e.printStackTrace();
throw e;
}
}finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
public List<Regime> findAll(int offset) throws Exception{

String query = "SELECT * FROM REGIME";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 statement.setInt(1, offset);	 return DBToModel(statement.executeQuery());
}
catch(Exception e){
e.printStackTrace();
throw e;
}
}finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
public Regime findById(int id) throws Exception{

String query = "SELECT * FROM REGIME WHERE IDREGIME = ?";
ResultSet res = null;
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 statement.setInt(1, id);
	 if(res.next()){
		 return Creation.creerRegime(res);
	}
throw new Exception("Ce Regime est introuvable ou a été retiré");
}
catch(Exception e){
e.printStackTrace();
throw e;
}
}finally {
if(res != null) res.close();
if(statement != null)statement.close();
if(con != null)con.close();
}
}