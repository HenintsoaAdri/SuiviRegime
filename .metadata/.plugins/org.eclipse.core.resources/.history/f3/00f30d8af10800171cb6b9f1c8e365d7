package s6.suiviRegime.utilitaire;
import java.io.*;

public class DaoGenerateur {
	
	File dao = new File("src/s6/suiviRegime/");
	public void generateDao(File path){
		try {
			if(path.isFile()){
				generateFileDao(path);
				return;
			}
			File [] liste = path.listFiles();
			for(File file : liste){
				generateFileDao(file);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public void generateFileDao(File file) throws Exception{
		FileReader fileReader = null;
		BufferedReader bufferedReader = null;
		if(file.isFile()){
			try {
				fileReader = new FileReader(file);
				ClasseAGenerer classe = new ClasseAGenerer(file.getName());
				bufferedReader = new BufferedReader(fileReader);
				String line;
				int compteurAccolade = 0;
				while ((line = bufferedReader.readLine()) != null) {
					if(line.contains("{")){
						compteurAccolade++;
						continue;
					}
					if(line.contains("}")){
						compteurAccolade--;
						continue;
					}
					if(line.contains("package")){
						classe.setPackages(line.split(" ")[1]);
					}
					if((compteurAccolade - 1) == 0 && line.endsWith(";")){
						if(line.contains("="))line = line.substring(0, line.indexOf('='));
						if(line.contains("List")) continue;
							line = line.replace(";", "");
							line = line.replace("private", "");
							line = line.replace("static final", "");
							String [] attributType = line.split(" ");
							classe.addAttribut(attributType[0],attributType[1]);
					}
				}
				writeDao(classe);
			} catch (Exception e) {
				throw e;
			} finally{
				if(fileReader != null) fileReader.close();
				if(bufferedReader != null) bufferedReader.close();
			}
		}
		else if(file.isDirectory()){
			generateDao(file);
		}
	}
	public String generateInitialisation(boolean autoCommit){
		String init =  "Connection con = null;\n"
				+ "PreparedStatement statement = null;\n"
				+ "try{\n"
				+ "\t con = UtilDB.getConnexion();\n"
				+ "\t statement = con.prepareStatement(query);\n";
				if(!autoCommit) init += "\t con.setAutoCommit(false);\n";
				return init;
	}
	public String generateSave(ClasseAGenerer classe){
		String function = 
		"public  void save("
		+ classe.getNomModele()
		+ " modele) throws Exception{\n\n"
		+ "String query = " + classe.getSaveQuery() + ";\n"
		+ generateInitialisation(false);
		int i = 1;
		String type = "";
		String nom = "";
		for(String[] attribut : classe.getAttribut()){
			type = attribut[0];
			nom = attribut[1];
			if(attribut[1].equalsIgnoreCase("id")) continue;
			else if(attribut[1].startsWith("id")) nom = classe.getNonPrimitifMethode(attribut[1]);
			function += "\t statement.set";
			function += StringUtil.firstUpper(type);
			function += "("+ i + ", model.get";
			function += StringUtil.firstUpper(nom);
			function += "());\n";
			i++;
		}
		return function;
	}
	public String generateUpdate(ClasseAGenerer classe){
		String function = 
				"public  void update("
				+ classe.getNomModele()
				+ " model) throws Exception{\n\n"
				+ "String query = " + classe.getUpdateQuery() + ";\n"
				+ generateInitialisation(false);
				int i = 1;
				String type = "";
				String nom = "";
				for(String[] attribut : classe.getAttribut()){
					type = attribut[0];
					nom = attribut[1];
					if(attribut[1].equalsIgnoreCase("id")) continue;
					else if(attribut[1].startsWith("id")) nom = classe.getNonPrimitifMethode(attribut[1]);
					function += "\t statement.set";
					function += StringUtil.firstUpper(type);
					function += "("+ i + ", model.get";
					function += StringUtil.firstUpper(nom);
					function += "());\n";
					i++;
				}
				function += "\t statement.setInt("
						+ i
						+ ", model.getId());";
				return function;
	}
	public String generateDelete(ClasseAGenerer classe){
		String function = 
		"public void delete("
				+ classe.getNomModele()
				+ " model) throws Exception{\n\n"
				+ "String query = " + classe.getDeleteQuery() + ";\n"
				+ generateInitialisation(false)
				+ "\t statement.setInt(1, model.getId());";
				return function;
	}
	public String generateFindAll(ClasseAGenerer classe){
		String function = 
				"public List<"
				+ classe.getNomModele()
				+ "> findAll() throws Exception{\n\n"
				+ "String query = " + classe.getFindAllQuery() + ";\n"
				+ generateInitialisation(true)
				+ "\t return DBToModel(statement.executeQuery());";
				return function;
	}
	public String generateFindAllOffset(ClasseAGenerer classe){
		String function = 
				"public List<"
				+ classe.getNomModele()
				+ "> findAll(int offset) throws Exception{\n\n"
				+ "String query = " + classe.getFindAllQuery() + ";\n"
				+ generateInitialisation(true)
				+ "\t statement.setInt(1, offset);"
				+ "\t return DBToModel(statement.executeQuery());";
				return function;
	}
	public String generateFindById(ClasseAGenerer classe){
		String function = 
				"public "
				+ classe.getNomModele()
				+ " findById(int id) throws Exception{\n\n"
				+ "String query = " + classe.getFindByIdQuery() + ";\n"
				+ "ResultSet res = null;\n"
				+ generateInitialisation(true)
				+ "\t statement.setInt(1, id);\n"
				+ "\t if(res.next()){\n"
				+ "\t\t return Creation.creer"
				+ classe.getNomModele()
				+ "(res);\n"
				+ "\t}\n"
				+ "throw new Exception(\"Ce "
				+ classe.getNomModele()
				+ " est introuvable ou a \u00e9t\u00e9 retir\u00e9\");";
				return function;
	}
	public void writeDao(ClasseAGenerer classe){
		File newDao = new File(dao,classe.getNomFichier());
	}
}
