package s6.suiviRegime.daoGenere;
import java.sql.*;
import java.util.*;
import s6.suiviRegime.modele.*;
public class AlimentationDao{ 
public  void save(Alimentation model) throws Exception{

String query = "INSERT INTO ALIMENTATION (IDREGIME, REPAS, BOISSON, PERIODE, DATE) VALUES(?, ?, ?, ?, ?)";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 con.setAutoCommit(false);
	 statement.setInt(1, model.getRegime().getId());
	 statement.setString(2, model.getRepas());
	 statement.setString(3, model.getBoisson());
	 statement.setInt(4, model.getPeriode());
	 statement.setDate(5, model.getDate());
	 statement.execute();
	 con.commit();
}
catch(Exception e){
con.rollback();
e.printStackTrace();
throw new Exception(" Alimentation contenant des erreurs, création échouée.");
}
finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
}public  void update(Alimentation model) throws Exception{

String query = "UPDATE ALIMENTATION SET IDREGIME= ?, REPAS= ?, BOISSON= ?, PERIODE= ?, DATE= ? WHERE IDALIMENTATION = ?";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 con.setAutoCommit(false);
	 statement.setInt(1, model.getRegime().getId());
	 statement.setString(2, model.getRepas());
	 statement.setString(3, model.getBoisson());
	 statement.setInt(4, model.getPeriode());
	 statement.setDate(5, model.getDate());
	 statement.setInt(6, model.getId());
	 statement.execute();
	 con.commit();
}
catch(Exception e){
con.rollback();
e.printStackTrace();
throw e;
}
finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
}public void delete(Alimentation model) throws Exception{

String query = "DELETE FROM ALIMENTATION WHERE IDALIMENTATION = ?";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 con.setAutoCommit(false);
	 statement.setInt(1, model.getId());
	 statement.execute();
	 con.commit();
}
catch(Exception e){
con.rollback();
e.printStackTrace();
throw e;
}
finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
}public List<Alimentation> findAll() throws Exception{

String query = "SELECT * FROM ALIMENTATION";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);

	 return DBToModel(statement.executeQuery());
}
catch(Exception e){
e.printStackTrace();
throw e;
}
finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
}public List<Alimentation> findAll(int offset) throws Exception{

String query = "SELECT * FROM ALIMENTATION";
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 statement.setInt(1, offset);	 return DBToModel(statement.executeQuery());
}
catch(Exception e){
e.printStackTrace();
throw e;
}
finally {
if(statement != null)statement.close();
if(con != null)con.close();
}
}public Alimentation findById(int id) throws Exception{

String query = "SELECT * FROM ALIMENTATION WHERE IDALIMENTATION = ?";
ResultSet res = null;
Connection con = null;
PreparedStatement statement = null;
try{
	 con = UtilDB.getConnexion();
	 statement = con.prepareStatement(query);
	 statement.setInt(1, id);
	 if(res.next()){
		 return Creation.creerAlimentation(res);
	}
throw new Exception("Ce Alimentation est introuvable ou a été retiré");
}
catch(Exception e){
e.printStackTrace();
throw e;
}
finally {
if(res != null) res.close();
if(statement != null)statement.close();
if(con != null)con.close();
}
}}