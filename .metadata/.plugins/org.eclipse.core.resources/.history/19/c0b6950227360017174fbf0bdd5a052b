package s6.suiviRegime.action;

import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import java.util.Map;

import s6.suiviRegime.modele.Utilisateur;
import s6.suiviRegime.service.BaseService;
import s6.suiviRegime.service.UtilisateurService;

public class UtilisateurAction extends ActionSupport {
	private boolean inscription = true;
	private Utilisateur utilisateur;
	private String erreur;
	private String dateNaissance;
	private String email;
	private String password;
	private String confirmPassword;
	
	public String inscription()throws Exception{
		ConfigurableApplicationContext context = null;
		try{
			if(getUtilisateur() == null){
				setInscription(true);
				return "error";
			}
			
			context = new ClassPathXmlApplicationContext("list-beans.xml");
			BaseService service = (BaseService) context.getBean("baseService");
			getUtilisateur().setDateNaissance(dateNaissance);
			getUtilisateur().setPassword(getPassword(), getConfirmPassword());
			service.save(getUtilisateur());
			setInscription(false);
			return "success";
		}catch(Exception e){
			setErreur("Utilisateur non créé. Des erreurs ont détéctées");
			e.printStackTrace();
			return "error";
		}finally{
			if(context != null){
				context.close();
			}
		}
	}
	
	public String login()throws Exception{
		ConfigurableApplicationContext context = null;
		try{
			if(getEmail() == null || getPassword() == null) return "error";
			context = new ClassPathXmlApplicationContext("list-beans.xml");
			Map<String, Object> session = ActionContext.getContext().getSession();
			UtilisateurService service = (UtilisateurService) context.getBean("utilisateurService");
			session.put("user", service.login(getEmail(),getPassword()));
			return "success";
		}catch(Exception e){
			setErreur(e.getMessage());
			e.printStackTrace();
			setInscription(false);
			return "error";
		}finally{
			if(context != null){
				context.close();
			}
		}
	}
	
	public boolean getInscription() {
		return inscription;
	}
	public void setInscription(boolean inscription) {
		this.inscription = inscription;
	}

	public Utilisateur getUtilisateur() {
		return utilisateur;
	}
	public void setUtilisateur(Utilisateur utilisateur) {
		this.utilisateur = utilisateur;
	}

	public String getErreur() {
		return erreur;
	}
	public void setErreur(String erreur) {
		this.erreur = erreur;
	}

	public String getDateNaissance() {
		return dateNaissance;
	}
	public void setDateNaissance(String dateNaissance) {
		this.dateNaissance = dateNaissance;
	}

	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}

	public String getConfirmPassword() {
		return confirmPassword;
	}
	public void setConfirmPassword(String confirmPassword) {
		this.confirmPassword = confirmPassword;
	}

	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}	
}
